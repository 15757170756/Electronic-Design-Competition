// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/13/2015 13:25:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FPGA_EP2C
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FPGA_EP2C_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A16;
reg A17;
reg A18;
reg [15:0] treg_AD_IN;
reg clk_25M;
reg clk_channel_a;
reg NADV;
reg NOE;
reg NWE;
// wires                                               
wire [15:0] AD_IN;
wire BUF_1;
wire BUF_2;
wire BUF_3;
wire BUF_4;
wire INT0;
wire INT4;

// assign statements (if any)                          
assign AD_IN = treg_AD_IN;
FPGA_EP2C i1 (
// port map - connection between master ports and signals/registers   
	.A16(A16),
	.A17(A17),
	.A18(A18),
	.AD_IN(AD_IN),
	.BUF_1(BUF_1),
	.BUF_2(BUF_2),
	.BUF_3(BUF_3),
	.BUF_4(BUF_4),
	.clk_25M(clk_25M),
	.clk_channel_a(clk_channel_a),
	.INT0(INT0),
	.INT4(INT4),
	.NADV(NADV),
	.NOE(NOE),
	.NWE(NWE)
);
initial 
begin 
#1000000 $finish;
end 

// A16
initial
begin
	A16 = 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

